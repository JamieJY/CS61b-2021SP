
public class Dog extends Animal {
public Dog(String name, int age) {
super(name, age);
 noise = "Woof!";
 }

@Override
 public void greet() {
 System.out.println("Dog " + name + " says: " + makeNoise());
 }

 public void playFetch() {
 System.out.println("Fetch, " + name + "!");
 }
}






public class Main {
    public static void main(String[] args) {
        
        Animal a = new Animal("Pluto", 10);
        Cat c = new Cat("Garfield", 6);
        Dog d = new Dog("Fido", 4);
        a.greet(); // (A) Animal Pluto says: Huh?
        c.greet(); // (B) Cat Garfield says: Meow!
        d.greet(); // (C) Dog Fido says: WOOF!
        a = c;
        ((Cat) a).greet(); // (D) Cat Garfield says: Meow! because a changed its static type from Animal to Cat
        a.greet(); // (E) Cat Garfield says: Meow!  greet() is overridden so it follows the dynamic method selection
        a = new Dog("Spot", 10);
        a.greet();//Dog Spot says: Woof!
        d = (Dog) a;
        a.greet();//Dog Spot says: Woof!
        d.greet();//Dog Spot says: Woof!
        //a = new Dog("Spot", 10);
        //d = a;Why would this code produce a compiler error? How could we fix this error
        // cast the static type of a from cat to dog 
    }
}

