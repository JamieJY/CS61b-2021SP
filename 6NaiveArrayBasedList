/**   0 1 2 3
item [3 4 5 0  0 0 0 0 0]
size:3
invariants:
the position of the next item to be inserted using addlast is always size;
the number of items in the alist is always size;
the position of the last item in the list is always size-1;
*/
public class AList {
   private int[] items;
   private int size;
/** Creates an empty list. */
    public AList() {
     items = new int[100];
     size = 0;
    }

    /** Inserts X into the back of the list. */
    public void addLast(int x) {
    items[size] = x;
    size += 1;
    }

    /** Returns the item from the back of the list. */
    public int getLast() {
        return items[size-1];        
    }
    /** Gets the ith item in the list (0 is the front). */
    public int get(int i) {
        return items[i];        
    }

    /** Returns the number of items in the list. */
    public int size() {
        return size;        
    }

    /** Deletes item from back of the list and
      * returns deleted item. */
    public int removeLast() {
        int x = getLast();
        //item[size] = 0; won't hurt but unnecessary
        size -= 1;
        return x;
    }
} 
